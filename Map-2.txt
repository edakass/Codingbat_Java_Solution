<word0>
Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array,
 always with the value 0. For example the string "hello" makes the pair "hello":0. We'll do more complicated counting later,
 but for this problem the value is simply 0.


word0(["a", "b", "a", "b"]) → {"a": 0, "b": 0}
word0(["a", "b", "a", "c", "b"]) → {"a": 0, "b": 0, "c": 0}
word0(["c", "b", "a"]) → {"a": 0, "b": 0, "c": 0}

public Map<String, Integer> word0(String[] strings) {
  /*her farklı dize için her zaman 0 değeriyle bir anahtar içeren
  bir Map<String, Integer> döndürün.*/
  Map<String,Integer> map=new HashMap<String,Integer>();
  for(int i=0;i<strings.length;i++){
    map.put(strings[i],0);
  }
  return map;
  
}
/*Map<String, Integer> map = new HashMap();
  for (String s:strings) {
    map.put(s, 0);
  }
  return map;*/
-------------------------------------------------------------------------------------------------------------
<wordCount>
The classic word-count algorithm: given an array of strings, return a Map<String, Integer> with a key for 
each different string, with the value the number of times that string appears in the array.


wordCount(["a", "b", "a", "c", "b"]) → {"a": 2, "b": 2, "c": 1}
wordCount(["c", "b", "a"]) → {"a": 1, "b": 1, "c": 1}
wordCount(["c", "c", "c", "c"]) → {"c": 4}

public Map<String, Integer> wordCount(String[] strings) {
  //verilen harften kaç adet olduğunu gösteren kod
  Map<String,Integer> map=new HashMap<String,Integer>();
  for(int i=0;i<strings.length;i++){
    String gecici=strings[i];
    
    if(map.containsKey(gecici)){
      int sayac=map.get(gecici);
      map.put(gecici,sayac+1);
    }else{
      map.put(gecici,1);
    }
  }
  return map;
  
}
-------------------------------------------------------------------------------------------------------------
<wordMultiple>
Given an array of strings, return a Map<String, Boolean> where each different string is a key and its 
value is true if that string appears 2 or more times in the array.


wordMultiple(["a", "b", "a", "c", "b"]) → {"a": true, "b": true, "c": false}
wordMultiple(["c", "b", "a"]) → {"a": false, "b": false, "c": false}
wordMultiple(["c", "c", "c", "c"]) → {"c": true}

public Map<String, Boolean> wordMultiple(String[] strings) {
  /*Bir dize dizisi verildiğinde, her farklı dizenin bir anahtar olduğu ve
  bu dize dizide 2 veya daha fazla kez görünüyorsa değeri doğru olan
  bir Map<String, Boolean> döndürün.*/
  Map<String,Integer> sayac=new HashMap<String,Integer>();
  Map<String,Boolean> sonuc=new HashMap<String,Boolean>();
  
  for(int i=0;i<strings.length;i++){
    String anahtar=strings[i];
    
    if(sayac.containsKey(anahtar)){
      int deger=sayac.get(anahtar);
      deger++;
      sayac.put(anahtar,deger);
      
    }else{
      sayac.put(anahtar,1);
    }
    sonuc.put(anahtar,sayac.get(anahtar)>=2);
  }
  return sonuc;
}

/*Map<String, Boolean> map = new HashMap();
  for (String s:strings) {
    // plan for stored boolean:
    //   false = seen it once
    //   true = seen it twice or more
    if (!map.containsKey(s)) {
      map.put(s, false);
    }
    else if (map.get(s) == false) {  // works without this test
      map.put(s, true);
    }
  }
  return map;*/
-------------------------------------------------------------------------------------------------------------
<wordLen>
Given an array of strings, return a Map<String, Integer> containing a key for every different string in
 the array, and the value is that string's length.


wordLen(["a", "bb", "a", "bb"]) → {"bb": 2, "a": 1}
wordLen(["this", "and", "that", "and"]) → {"that": 4, "and": 3, "this": 4}
wordLen(["code", "code", "code", "bug"]) → {"code": 4, "bug": 3}

public Map<String, Integer> wordLen(String[] strings) {
  /*Bir dize dizisi verildiğinde, dizideki her farklı dize için bir anahtar içeren 
  bir Map<String, Integer> döndürün ve değer bu dizenin uzunluğudur.*/
  Map<String,Integer> map=new HashMap<String,Integer>();
  
  for (int i = 0; i < strings.length; i++) {
       String gecici = strings[i];
          map.put(gecici, gecici.length());
  }
   
  return map;
}
-------------------------------------------------------------------------------------------------------------
<firstChar>
Given an array of non-empty strings, return a Map<String, String> with a key for every different first 
character seen, with the value of all the strings starting with that character appended together in the 
order they appear in the array.


firstChar(["salt", "tea", "soda", "toast"]) → {"s": "saltsoda", "t": "teatoast"}
firstChar(["aa", "bb", "cc", "aAA", "cCC", "d"]) → {"a": "aaaAA", "b": "bb", "c": "cccCC", "d": "d"}
firstChar([]) → {}

public Map<String, String> firstChar(String[] strings) {
  /*Boş olmayan dizelerden oluşan bir dizi verildiğinde, 
  görülen her farklı ilk karakter için bir anahtar içeren 
  bir Map<String, String> döndürün ve o karakterle başlayan tüm dizelerin 
  değeri dizide göründükleri sırayla birbirine eklenir.*/
  Map<String,String> map=new HashMap<String,String>();
  
  for(int i=0;i<strings.length;i++){
    String anahtar=String.valueOf(strings[i].charAt(0));
    
    if(map.containsKey(anahtar)){
      String deger=map.get(anahtar)+strings[i];
      map.put(anahtar,deger);
    }else{
      map.put(anahtar,strings[i]);
    }
  }
  return map;
  
}
-------------------------------------------------------------------------------------------------------------
<allSwap>
We'll say that 2 strings "match" if they are non-empty and their first chars are the same.
 Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier
 string in the array, swap the 2 strings in the array. When a position in the array has been swapped,
 it no longer matches anything. Using a map, this can be solved making just one pass over the array.
 More difficult than it looks.


allSwap(["ab", "ac"]) → ["ac", "ab"]
allSwap(["ax", "bx", "cx", "cy", "by", "ay", "aaa", "azz"]) → ["ay", "by", "cy", "cx", "bx", "ax", "azz", "aaa"]
allSwap(["ax", "bx", "ay", "by", "ai", "aj", "bx", "by"]) → ["ay", "by", "ax", "bx", "aj", "ai", "by", "bx"]

public String[] allSwap(String[] strings) {
  /*Boş değilse ve ilk karakterleri aynıysa 2 dizenin "eşleştiğini" söyleyeceğiz. 
  Döngü yapın ve ardından verilen boş olmayan dize dizisini aşağıdaki gibi döndürün: 
  bir dize dizideki önceki bir dizeyle eşleşirse, dizideki 2 dizeyi değiştirin.
  Dizideki bir konum değiştirildiğinde, artık hiçbir şeyle eşleşmez. 
  Bir harita kullanarak, bu dizi üzerinden sadece bir geçiş yapılarak çözülebilir.
  Göründüğünden daha zor.*/
   Map<String, Integer> map = new HashMap<String, Integer>();
  for (int i = 0; i < strings.length; i++) {
    String anahtar = String.valueOf(strings[i].charAt(0));
    if (map.containsKey(anahtar)) {
      // degiştirme
      int    pos   = map.get(anahtar); 
      String gecici   = strings[pos];
      strings[pos] = strings[i];
      strings[i]   = gecici ;
      //sil
      map.remove(anahtar);
    } else {
      map.put(anahtar, i);
    }
  }
  return strings;
}
-------------------------------------------------------------------------------------------------------------
<pairs>
Given an array of non-empty strings, create and return a Map<String, String> as follows: for each string add
 its first character as a key with its last character as the value.


pairs(["code", "bug"]) → {"b": "g", "c": "e"}
pairs(["man", "moon", "main"]) → {"m": "n"}
pairs(["man", "moon", "good", "night"]) → {"g": "d", "m": "n", "n": "t"}

public Map<String, String> pairs(String[] strings) {
  /*Boş olmayan dizelerden oluşan bir dizi verildiğinde, 
  aşağıdaki gibi bir Map<String, String> oluşturun ve döndürün: 
  her dize için ilk karakterini anahtar olarak ekleyin ve son karakteri 
  değer olarak ekleyin.*/
   Map<String, String> map = new HashMap<String, String>();
   
  for (int i = 0; i < strings.length; i++) {
    String gecici   = strings[i];
    String ilk = String.valueOf(gecici.charAt(0));
    String son = String.valueOf(gecici.charAt(gecici.length() - 1));
    map.put(ilk,son);
  }
   
  return map;
  
}
-------------------------------------------------------------------------------------------------------------
<wordAppend>
Loop over the given array of strings to build a result string like this: when a string appears the 2nd,
 4th, 6th, etc. time in the array, append the string to the result. Return the empty string if no
 string appears a 2nd time.


wordAppend(["a", "b", "a"]) → "a"
wordAppend(["a", "b", "a", "c", "a", "d", "a"]) → "aa"
wordAppend(["a", "", "a"]) → "a"

public String wordAppend(String[] strings) {
  //2 kez dönmesi gerekiyor
  /*Bunun gibi bir sonuç dizesi oluşturmak için verilen dize dizisi üzerinde döngü yapın:
  bir dize dizide 2., 4., 6. vb. zamanda göründüğünde, dizeyi sonuca ekleyin. 
  2. kez hiçbir dize görünmezse boş dizeyi döndürün.*/
  Map<String, Integer> map    = new HashMap<String, Integer>();
  String sonuc = "";
 for (int i = 0; i < strings.length; i++) {
   String anahtar = strings[i];
   if (map.containsKey(anahtar)) {
     int deger = map.get(anahtar);
     deger++;
     if (deger % 2 == 0) {
      sonuc += anahtar;
     }
     map.put(anahtar,deger);
   } else {
     map.put(anahtar, 1);
   }
    
 }
 return sonuc;
}
-------------------------------------------------------------------------------------------------------------
<firstSwap>
We'll say that 2 strings "match" if they are non-empty and their first chars are the same. 
Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier 
string in the array, swap the 2 strings in the array. A particular first char can only cause 1 swap, 
so once a char has caused a swap, its later swaps are disabled. Using a map, this can be solved making 
just one pass over the array. More difficult than it looks.


firstSwap(["ab", "ac"]) → ["ac", "ab"]
firstSwap(["ax", "bx", "cx", "cy", "by", "ay", "aaa", "azz"]) → ["ay", "by", "cy", "cx", "bx", "ax", "aaa", "azz"]
firstSwap(["ax", "bx", "ay", "by", "ai", "aj", "bx", "by"]) → ["ay", "by", "ax", "bx", "ai", "aj", "bx", "by"]

public String[] firstSwap(String[] strings) {
  /*Boş değilse ve ilk karakterleri aynıysa 2 dizenin "eşleştiğini" söyleyeceğiz.
  Döngü yapın ve ardından verilen boş olmayan dize dizisini aşağıdaki gibi döndürün:
  bir dize dizideki önceki bir dizeyle eşleşirse, dizideki 2 dizeyi değiştirin. 
  Belirli bir ilk karakter yalnızca 1 takasa neden olabilir, bu nedenle bir karakter
  takasa neden olduğunda sonraki takasları devre dışı bırakılır. Bir harita kullanarak,
  bu dizi üzerinden sadece bir geçiş yapılarak çözülebilir. Göründüğünden daha zor.*/
  Map<String, Integer> map = new HashMap<String, Integer>();
  for (int i = 0; i < strings.length; i++) {
    String anahtar = String.valueOf(strings[i].charAt(0));
    if (map.containsKey(anahtar)) {
      int deger = map.get(anahtar);
      if (deger == -1) {
        continue;
      }
      // değiştirme
      int    pos   = map.get(anahtar); 
      String gecici   = strings[pos];
      strings[pos] = strings[i];
      strings[i]   = gecici  ;
      // set a flag
      map.put(anahtar, -1);
    } else {
      map.put(anahtar, i);
    }
  }
  return strings;
}


