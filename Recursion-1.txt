<factorial>
Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1.
 Compute the result recursively (without loops).


factorial(1) → 1
factorial(2) → 2
factorial(3) → 6

public int factorial(int n) {
  if(n==0)
    return 1;
  return n*factorial(n-1);
}
-------------------------------------------------------------------------------------------------------------
<bunnyEars2>
We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies (1, 3, ..) have the normal 2 ears. 
The even bunnies (2, 4, ..) we'll say have 3 ears, because they each have a raised foot. 
Recursively return the number of "ears" in the bunny line 1, 2, ... n (without loops or multiplication).


bunnyEars2(0) → 0
bunnyEars2(1) → 2
bunnyEars2(2) → 5

public int bunnyEars2(int bunnies) {
  /*
  Tek tavşanların (1, 3, ..) normal 2 kulağı var. Çift tavşanların (2, 4, ..) 
  3 kulağı var diyeceğiz çünkü her birinin yükseltilmiş ayağı var.*/
  if(bunnies ==0 ) 
     return 0;
  if(bunnies %2==0 ) 
     return 3+bunnyEars2(bunnies-1);
   else return 2 + bunnyEars2(bunnies-1);

}
-------------------------------------------------------------------------------------------------------------
<count7>
Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 
yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), 
while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


count7(717) → 2
count7(7) → 1
count7(123) → 0

public int count7(int n) {
    if (n < 1) return 0;

  if (n % 10 == 7) return 1 + count7(n/10);

  else return count7(n/10);

}
-------------------------------------------------------------------------------------------------------------
<countX>
Given a string, compute recursively (no loops) the number of lowercase 'x' chars in the string.


countX("xxhixx") → 4
countX("xhixhix") → 3
countX("hi") → 0

public int countX(String str) {
  //x'leri hesaplama
  int sayac=0;
  if(sayac==str.length()){
    return 0;
  }
   if(str.charAt(sayac)=='x'){
    sayac=sayac+1;
     
   }
    return sayac+countX(str.substring(1));
}
-------------------------------------------------------------------------------------------------------------
<changePi>
Given a string, compute recursively (no loops) a new string where all appearances of "pi" have been 
replaced by "3.14".


changePi("xpix") → "x3.14x"
changePi("pipi") → "3.143.14"
changePi("pip") → "3.14p"

public String changePi(String str) {
  //pi nin olduğu yere 3.14 yaz
  if(str.equals("") || str.length()<2) 
    return str;
  if(str.charAt(0)=='p' && str.charAt(1)=='i')
    return "3.14"+changePi(str.substring(2));
  return str.charAt(0)+changePi(str.substring(1));
}
-------------------------------------------------------------------------------------------------------------
<array11>
Given an array of ints, compute recursively the number of times that the value 11 appears in the array. 
We'll use the convention of considering only the part of the array that begins at the given index. 
In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.


array11([1, 2, 11], 0) → 1
array11([11, 11], 0) → 2
array11([1, 2, 3, 4], 0) → 0

public int array11(int[] nums, int index) {
  //dizide 11 değerinin kaç kez göründüğünü yazan program
  if(index>=nums.length) 
     return 0;
  if(nums[index]==11) 
     return 1+array11(nums,index+1);
  else
    return array11(nums,index+1);
}
-------------------------------------------------------------------------------------------------------------
<pairStar>
Given a string, compute recursively a new string where identical chars that are adjacent in the original
 string are separated from each other by a "*".


pairStar("hello") → "hel*lo"
pairStar("xxyy") → "x*xy*y"
pairStar("aaaa") → "a*a*a*a"

public String pairStar(String str) {
  /*Bir dize verildiğinde, özgün dizede bitişik olan özdeş karakterlerin 
  birbirinden bir "*" ile ayrıldığı yeni bir dizeyi yinelemeli olarak hesaplayın.
  Yani aynı olanlar
  */
  if (str.length()<2)
    return str;
  String sonuc = str.substring(0,1);
   if (str.charAt(0) == str.charAt(1))
    sonuc += "*";
   return sonuc + pairStar(str.substring(1));
}
/*ya da
if (str.equals("") || str.length() == 1) return str;
  if (str.charAt(0) == str.charAt(1))
    return str.charAt(0) + "*" + pairStar(str.substring(1));
  else
    return str.charAt(0) + pairStar(str.substring(1));
*/
-------------------------------------------------------------------------------------------------------------
<countAbc>
Count recursively the total number of "abc" and "aba" substrings that appear in the given string.


countAbc("abc") → 1
countAbc("abcxxabc") → 2
countAbc("abaxxaba") → 2

public int countAbc(String str) {
  //Verilen dizede görünen
  //toplam "abc" ve "aba" alt dizelerinin sayısını yinelemeli olarak sayan program
  if(str.length()<3) return 0;
  if(str.substring(0,3).equals("abc") || str.substring(0,3).equals("aba"))
    return 1+countAbc(str.substring(1));
  else
    return countAbc(str.substring(1));
}
-------------------------------------------------------------------------------------------------------------
<countHi2>
Given a string, compute recursively the number of times lowercase "hi" appears in the string, however 
do not count "hi" that have an 'x' immedately before them.


countHi2("ahixhi") → 1
countHi2("ahibhi") → 2
countHi2("xhixhi") → 0

public int countHi2(String str) {
  /*
  Bir dize verildiğinde, dizede"hi"ifadesinden kaç kez olduğunu
  yinelemeli olarak hesaplayın, ancak hemen önünde bir "x" olan "hi"yi saymayın.*/
  int len=str.length();
  if(len<2)
    return 0;
  if(str.substring(len-2,len).equals("hi")){
    if((len>2 && str.charAt(len-3) !='x') || len==2)
      return 1+countHi2(str.substring(0,len-1));
  }
  return countHi2(str.substring(0,len-1));
}
-------------------------------------------------------------------------------------------------------------
<strCount>
Given a string and a non-empty substring sub, compute recursively the number of times that sub appears in
 the string, without the sub strings overlapping.


strCount("catcowcat", "cat") → 2
strCount("catcowcat", "cow") → 1
strCount("catcowcat", "dog") → 0

public int strCount(String str, String sub) {
  //verilen ifadeden kaç tane yazıldığını yazan program
  int strUzunluk = str.length();
  int subUzunluk = sub.length();
  if (strUzunluk < subUzunluk) 
    return 0;
  if (str.substring(0,subUzunluk).equals(sub))
    return 1 + strCount(str.substring(subUzunluk), sub);
  else
    return strCount(str.substring(1), sub);
}
-------------------------------------------------------------------------------------------------------------
<bunnyEars>
We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of 
ears across all the bunnies recursively (without loops or multiplication).


bunnyEars(0) → 0
bunnyEars(1) → 2
bunnyEars(2) → 4

public int bunnyEars(int bunnies) {
  /*Bir dizi tavşanımız var ve her tavşanın iki büyük sarkık kulağı var.
  Tüm tavşanlardaki toplam  kulak sayısını yinelemeli olarak 
  (döngüler veya çarpma olmadan) hesaplamak istiyoruz.
  */
  if (bunnies == 0) 
    return 0;
  return 2 + bunnyEars(bunnies-1);
}
-------------------------------------------------------------------------------------------------------------
<triangle>
We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row 
has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in
 such a triangle with the given number of rows.


triangle(0) → 0
triangle(1) → 1
triangle(2) → 3

public int triangle(int rows) {
 /* Bloklardan oluşan üçgenimiz var. En üst satırda 1 blok, 
 bir sonraki satırda 2 blok, sonraki satırda 3 blok vb. 
 Verilen satır sayısına sahip böyle bir üçgendeki toplam 
 blok sayısını yinelemeli olarak (döngü veya çarpma olmadan) hesaplayan program. */
 //rows=satır
 if(rows==0) 
    return 0;
 return rows+triangle(rows-1);
}
-------------------------------------------------------------------------------------------------------------
<count8>
Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, 
except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%)
 by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


count8(8) → 1
count8(818) → 2
count8(8818) → 4

public int count8(int n) {
  //kaç tane 8 olduğunu hesaplayan program
	  if (n < 1) 
	    return 0;
    if (n % 10 == 8 && (n / 10) % 10 == 8)
      return 2 + count8(n/10);
    else if (n % 10 == 8) 
      return 1 + count8(n/10);
    else 
     return count8(n/10);

}
-------------------------------------------------------------------------------------------------------------
<countHi>
Given a string, compute recursively (no loops) the number of times lowercase "hi" appears in the string.


countHi("xxhixx") → 1
countHi("xhixhix") → 2
countHi("hi") → 1

public int countHi(String str) {
  //kaç adet "hi" olduğunu gösteren program
   if (str.length() <= 1) 
     return 0;
   int sayac = 0;
   if (str.substring(0, 2).equals("hi")) sayac = 1;  
    return sayac + countHi(str.substring(1));
}
-------------------------------------------------------------------------------------------------------------
<noX>
Given a string, compute recursively a new string where all the 'x' chars have been removed.


noX("xaxb") → "ab"
noX("abc") → "abc"
noX("xx") → ""

public String noX(String str) {
  /*Bir dize verildiğinde, 
  tüm 'x' karakterlerinin kaldırıldığı yinelemeli olarak yeni bir dize hesaplayın.*/
   if (str.equals("")) 
     return str;
   if (str.charAt(0) == 'x') 
     return noX(str.substring(1));
   else 
     return str.charAt(0) + noX(str.substring(1));

}
-------------------------------------------------------------------------------------------------------------
<array220>
Given an array of ints, compute recursively if the array contains somewhere a value followed in the array 
by that value times 10. We'll use the convention of considering only the part of the array that begins at
 the given index. In this way, a recursive call can pass index+1 to move down the array. 
The initial call will pass in index as 0.


array220([1, 2, 20], 0) → true
array220([3, 30], 0) → true
array220([3], 0) → false

public boolean array220(int[] nums, int index) {
   if (index >= nums.length-1)
     return false;
   if (nums[index+1] == nums[index] * 10) 
     return true;
    return array220(nums, index+1);

}
-------------------------------------------------------------------------------------------------------------
<endX>
Given a string, compute recursively a new string where all the lowercase 'x' chars have been moved to the 
end of the string.


endX("xxre") → "rexx"
endX("xxhixx") → "hixxxx"
endX("xhixhix") → "hihixxx"

public String endX(String str) {
  /*Bir dize verildiğinde, tüm küçük harfli 'x' karakterlerinin
  dizenin sonuna taşındığı yinelemeli yeni bir dize hesaplayın*/
   if(str.length()==0) 
     return "";
   if(str.charAt(0)=='x'){
    return endX(str.substring(1))+"x";
  }
   return str.charAt(0)+endX(str.substring(1));
}
-------------------------------------------------------------------------------------------------------------
<count11>
Given a string, compute recursively (no loops) the number of "11" substrings in the string. The "11" 
substrings should not overlap.


count11("11abc11") → 2
count11("abc11x11x11") → 3
count11("111") → 1

public int count11(String str) {
  //kaç tane 11 olduğunu hesaplayan program
  if (str.length() < 2) return 0;
  if (str.substring(0,2).equals("11"))
    return 1 + count11(str.substring(2));
  else
    return count11(str.substring(1));

}
-------------------------------------------------------------------------------------------------------------
<parenBit>
Given a string that contains a single pair of parenthesis, compute recursively a new string made of only
 of the parenthesis and their contents, so "xyz(abc)123" yields "(abc)".


parenBit("xyz(abc)123") → "(abc)"
parenBit("x(hello)") → "(hello)"
parenBit("(xy)1") → "(xy)"

public String parenBit(String str) { //bit parça anlamında da kullanılıyor
  //parantez içindeki ifadeyi yazan program kodu
  if (str.equals("")) return str;
  if (str.charAt(0) == '(') {
    if (str.charAt(str.length()-1) == ')')
      return str;
    else
      return parenBit(str.substring(0, str.length()-1));
  } else
    return parenBit(str.substring(1));

}
-------------------------------------------------------------------------------------------------------------
<strCopies>
Given a string and a non-empty substring sub, compute recursively if at least n copies of sub appear in the 
string somewhere, possibly with overlapping. N will be non-negative.


strCopies("catcowcat", "cat", 2) → true
strCopies("catcowcat", "cow", 2) → false
strCopies("catcowcat", "cow", 1) → true

public boolean strCopies(String str, String sub, int n) {
  //verilen ifadelerin doğruluğunu hesaplayan kod
  if (func(str, sub) == n)
    return true;
  else
    return false;
}
private int func(String str, String sub) {
  int strlen = str.length();
  int sublen = sub.length();
  if (strlen < sublen) 
    return 0;
  if (str.substring(0, sublen).equals(sub))
    return 1 + func(str.substring(1), sub);
  else
    return func(str.substring(1), sub);

 /* if(n == 0)
  return true;
  if(str.length() < sub.length())
   return false;
  if(str.substring(0,sub.length()).equals(sub))
   return strCopies(str.substring(1), sub, n-1);
   return strCopies(str.substring(1), sub, n);*/
}
-------------------------------------------------------------------------------------------------------------
<fibonacci>
The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. T
he first two values in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the 
sum of the previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. 
Define a recursive fibonacci(n) method that returns the nth fibonacci number, with n=0 representing 
the start of the sequence.


fibonacci(0) → 0
fibonacci(1) → 1
fibonacci(2) → 1

public int fibonacci(int n) {
  /*Fibonacci dizisi, matematiğin ünlü bir parçasıdır ve özyinelemeli bir tanımı vardır.
  Dizideki ilk iki değer 0 ve 1'dir (esas olarak 2 temel durum). 
  Sonraki her değer, önceki iki değerin toplamıdır, bu nedenle tüm 
  dizi şöyledir: 0, 1, 1, 2, 3, 5, 8, 13, 21 vb. 
  Dizinin başlangıcını temsil eden n=0 ile n'inci fibonacci sayısını döndüren
  yinelemeli bir fibonacci(n) yöntemi tanımlayın.
  */
  if (n <= 1) {
    return n;
}
   return fibonacci(n - 2) + fibonacci(n - 1);

/*
  if (n == 0) return 0;
  else if (n == 1) return 1;
  return fibonacci(n-1) + fibonacci(n-2);
*/
}
-------------------------------------------------------------------------------------------------------------
<sumDigits>
Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10
 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


sumDigits(126) → 9
sumDigits(49) → 13
sumDigits(12) → 3

public int sumDigits(int n) {
  /*Negatif olmayan bir int n verildiğinde, basamaklarının toplamını özyinelemeli
  olarak döndürür (döngü yok).
  */
   if (n < 10) 
     return n;
  return (n % 10) + sumDigits(n/10);

}
-------------------------------------------------------------------------------------------------------------
<powerN>
Given base and n that are both 1 or more, compute recursively (no loops) the value of base to the n power, 
so powerN(3, 2) is 9 (3 squared).


powerN(3, 1) → 3
powerN(3, 2) → 9
powerN(3, 3) → 27

public int powerN(int base, int n) {
  //üst alma
  if (n == 0)
    return 1;
  return base * powerN(base, n-1);

}
-------------------------------------------------------------------------------------------------------------
<changeXY>
Given a string, compute recursively (no loops) a new string where all the lowercase 'x' chars have been 
changed to 'y' chars.


changeXY("codex") → "codey"
changeXY("xxhixx") → "yyhiyy"
changeXY("xhixhix") → "yhiyhiy"

public String changeXY(String str) {
  //x'leri y harfine çevirme
    if (str.equals(""))
       return str;
    if (str.charAt(0) == 'x') 
      return "y" + changeXY(str.substring(1));
  return str.charAt(0) + changeXY(str.substring(1));

}
-------------------------------------------------------------------------------------------------------------
<array6>
Given an array of ints, compute recursively if the array contains a 6. We'll use the convention of 
considering only the part of the array that begins at the given index. In this way, a recursive call 
can pass index+1 to move down the array. The initial call will pass in index as 0.


array6([1, 6, 4], 0) → true
array6([1, 4], 0) → false
array6([6], 0) → true

public boolean array6(int[] nums, int index) {
  /*Bir int dizisi verildiğinde, dizi 6 içeriyorsa özyinelemeli olarak hesaplayın.
  Dizinin yalnızca verilen dizinde başlayan bölümünü dikkate alma kuralını kullanacağız.
  Bu şekilde, özyinelemeli bir çağrı dizide aşağı doğru hareket etmek için indeks+1'i 
  geçebilir. İlk çağrı dizinde 0 olarak geçecektir.*/
  if (index >= nums.length)
    return false;
  if (nums[index] == 6) 
     return true;
  else 
    return array6(nums, index+1);

}
-------------------------------------------------------------------------------------------------------------
<allStar>
Given a string, compute recursively a new string where all the adjacent chars are now separated by a "*".


allStar("hello") → "h*e*l*l*o"
allStar("abc") → "a*b*c"
allStar("ab") → "a*b"

public String allStar(String str) {
  //tüm harflerin arasına * eklenmesi gereken kod
  if(str.equals("") || str.length()==1) 
    return str;
  return str.charAt(0)+"*"+allStar(str.substring(1));
}
-------------------------------------------------------------------------------------------------------------
<countPairs>
We'll say that a "pair" in a string is two instances of a char separated by a char. So "AxA" the A's make a
 pair. Pair's can overlap, so "AxAxA" contains 3 pairs -- 2 for A and 1 for x. Recursively compute the 
number of pairs in the given string.


countPairs("axa") → 1
countPairs("axax") → 2
countPairs("axbx") → 1

public int countPairs(String str) {
  /*Bir dizgedeki bir "çift"in, bir karakterle ayrılmış iki karakter örneği olduğunu
  söyleyeceğiz. Yani "AxA" A'lar bir çift oluşturur. Çiftler üst üste gelebilir,
  bu nedenle "AxAxA" 3 çift içerir - A için 2 ve x için 1.
  Verilen dizedeki çiftlerin sayısını yinelemeli olarak hesaplayın.*/

   if (str.equals("") || str.length() < 3)
    return 0;
  if (str.charAt(0) == str.charAt(2)) 
    return 1 + countPairs(str.substring(1));
  else 
     return countPairs(str.substring(1));
  
}
-------------------------------------------------------------------------------------------------------------
<stringClean>
Given a string, return recursively a "cleaned" string where adjacent chars that are the same have been 
reduced to a single char. So "yyzzza" yields "yza".


stringClean("yyzzza") → "yza"
stringClean("abbbcdd") → "abcd"
stringClean("Hello") → "Helo"

public String stringClean(String str) {
  //tekrarlayan ifadeyi kaldıran kod
 if (str.length() < 2) 
    return str;
  if (str.charAt(0) == str.charAt(1))
    return stringClean(str.substring(1));
  else
    return str.charAt(0) + stringClean(str.substring(1));

}
-------------------------------------------------------------------------------------------------------------
<nestParen>
Given a string, return true if it is a nesting of zero or more pairs of parenthesis, like "(())" or "((()))".
 Suggestion: check the first and last chars, and then recur on what's inside them.


nestParen("(())") → true
nestParen("((()))") → true
nestParen("(((x))") → false

public boolean nestParen(String str) {
  //nest iç içe geçmek demek
  /*Bir dize verildiğinde, "(())" veya "((()))" gibi sıfır veya 
  daha fazla parantez çiftinin iç içe geçmesi durumunda true değerini döndürün.
  Öneri: ilk ve son karakterleri kontrol edin ve ardından içlerinde ne olduğunu 
  tekrar edin.*/
   if (str.equals(""))
       return true;
   if (str.charAt(0) == '(' && str.charAt(str.length()-1) == ')')
    return nestParen(str.substring(1,str.length()-1));
   else
    return false;
  
}
-------------------------------------------------------------------------------------------------------------
<strDist>
Given a string and a non-empty substring sub, compute recursively the largest substring which starts and ends
 with sub and return its length.


strDist("catcowcat", "cat") → 9
strDist("catcowcat", "cow") → 3
strDist("cccatcowcatxx", "cat") → 9

public int strDist(String str, String sub) {
  /*Bir dize ve boş olmayan bir alt dize verildiğinde, 
  alt ile başlayan ve biten en büyük alt dizeyi yinelemeli olarak hesaplayın
  ve uzunluğunu döndürün.*/
   return func(str, sub).length(); 
}
private String func(String str, String sub) {
  int strlen = str.length();
  int sublen = sub.length();
  if (str.equals(""))
    return str;
  if (str.startsWith(sub)) {
    if (str.substring(strlen-sublen, strlen).equals(sub))
      return str;
    else
      return func(str.substring(0, strlen-1), sub);
  }
  else
    return func(str.substring(1), sub);

}

