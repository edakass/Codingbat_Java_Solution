<doubleChar>
Given a string, return a string where for every char in the original, there are two chars.


doubleChar("The") → "TThhee"
doubleChar("AAbb") → "AAAAbbbb"
doubleChar("Hi-There") → "HHii--TThheerree"

public String doubleChar(String str) {
  int len=str.length();
  String new_str="";
  for(int i=0;i<len;i++){
    new_str +=str.substring(i,i+1)+str.substring(i,i+1);
  }
  return new_str;
}
-------------------------------------------------------------------------------------------------------------
<countCode>
Return the number of times that the string "code" appears anywhere in the given string, except we'll 
accept any letter for the 'd', so "cope" and "cooe" count.


countCode("aaacodebbb") → 1
countCode("codexxcode") → 2
countCode("cozexxcope") → 2

public int countCode(String str) {
   if (str.length() < 4)
    return 0;
  else if (str.charAt(0)=='c' && str.charAt(1)=='o' && str.charAt(3)=='e')
    return 1 + countCode(str.substring(4));
  else
  return countCode(str.substring(1));
}
-------------------------------------------------------------------------------------------------------------
<bobThere>
Return true if the given string contains a "bob" string, but where the middle 'o' char can be any char.


bobThere("abcbob") → true
bobThere("b9b") → true
bobThere("bac") → false

public boolean bobThere(String str) {
  int len=str.length();
  
  for(int i=0;i<len-2;i++){
    if(str.charAt(i)=='b' && str.charAt(i+2)=='b')
      return true;
      
  }
  return false;
}
-------------------------------------------------------------------------------------------------------------
<repeatEnd>
Given a string and an int n, return a string made of n repetitions of the last n characters of the string. 
You may assume that n is between 0 and the length of the string, inclusive.


repeatEnd("Hello", 3) → "llollollo"
repeatEnd("Hello", 2) → "lolo"
repeatEnd("Hello", 1) → "o"

public String repeatEnd(String str, int n) {
  int len=str.length();
  String newWord="";
  
  for(int i=0;i<n;i++){
    newWord +=str.substring(len-n,len);
  }
  return newWord;
}
-------------------------------------------------------------------------------------------------------------
<prefixAgain>
Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string 
appear somewhere else in the string? Assume that the string is not empty 
and that N is in the range 1..str.length().


prefixAgain("abXYabc", 1) → true
prefixAgain("abXYabc", 2) → true
prefixAgain("abXYabc", 3) → false

public boolean prefixAgain(String str, int n) {
  int len=str.length();
  String prefix=str.substring(0,n);
  
  for(int i=n;i<len;i++){
    if(n+i<=len){
      
      if(prefix.equals(str.substring(i,n+i)))
        return true;
      
    }
  }
  return false;
}
-------------------------------------------------------------------------------------------------------------
<sameStarChar>
Returns true if for every '*' (star) in the string, if there are chars both immediately before and after 
the star, they are the same.


sameStarChar("xy*yzz") → true
sameStarChar("xy*zzz") → false
sameStarChar("*xa*az") → true

public boolean sameStarChar(String str) {
  int len=str.length();
  boolean found=true;
  
  for(int i=0;i<len;i++){
    String tmpString=str.substring(i,i+1);
    
    if(tmpString.equals("*") && i>0 && i<len-1){
      if(str.charAt(i-1)==str.charAt(i+1))
        found =true;
      else
        found =false;
    }
  }
  return found;
}
-------------------------------------------------------------------------------------------------------------
<starOut>
Return a version of the given string, where for every star (*) in the string the star and the chars 
immediately to its left and right are gone. So "ab*cd" yields "ad" and "ab**cd" also yields "ad".


starOut("ab*cd") → "ad"
starOut("ab**cd") → "ad"
starOut("sm*eilly") → "silly"

public String starOut(String str) {
  int len=str.length();
  String finalString="";
  
  for(int i=0;i<len;i++){
    if(i==0 && str.charAt(i) !='*')
      finalString+=str.charAt(i);
    if(i>0 && str.charAt(i) !='*' && str.charAt(i-1) !='*')
     finalString+=str.charAt(i);
    if(i>0 && str.charAt(i)=='*' && str.charAt(i-1)!='*')
     finalString=finalString.substring(0,finalString.length()-1);
  }
  return finalString;
}
-------------------------------------------------------------------------------------------------------------
<countHi>
Return the number of times that the string "hi" appears anywhere in the given string.


countHi("abc hi ho") → 1
countHi("ABChi hi") → 2
countHi("hihi") → 2

public int countHi(String str) {
  int count=0;
  if(str.length()==1 && str.charAt(0)=='h')
   count=0;
  else{
    for(int i=0;i<str.length();i++){
      if((str.charAt(i)=='h') && (str.charAt(i+1)=='i'))
         count+=1;
    }
  }
  return count;
}
-------------------------------------------------------------------------------------------------------------
<endOther>
Given two strings, return true if either of the strings appears at the very end of the other string, 
ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). 
Note: str.toLowerCase() returns the lowercase version of a string.


endOther("Hiabc", "abc") → true
endOther("AbC", "HiaBc") → true
endOther("abc", "abXabc") → true

public boolean endOther(String a, String b) {
  a=a.toLowerCase();
  int aLen=a.length();
  
  b=b.toLowerCase();
  int bLen=b.length();
  
  if(aLen<bLen){
    String temp=b.substring(bLen-aLen,bLen);
    if(temp.compareTo(a)==0)
      return true;
    else
     return false;
  }else{
    String temp=a.substring(aLen-bLen,aLen);
    if(temp.compareTo(b)==0)
      return true;
    else
      return false;
  }
}
-------------------------------------------------------------------------------------------------------------
<xyBalance>
We'll say that a String is xy-balanced if for all the 'x' chars in the string, there exists a 'y' char 
somewhere later in the string. So "xxy" is balanced, but "xyx" is not. One 'y' can balance multiple 'x's. 
Return true if the given string is xy-balanced.


xyBalance("aaxbby") → true
xyBalance("aaxbb") → false
xyBalance("yaaxbb") → false

public boolean xyBalance(String str) {
  Boolean x=false;
  Boolean y=false;
  int len=str.length();
  
  for(int i=0;i<len;i++){
    if(str.charAt(i)=='x' && y==true){
      x=true;
      y=false;
    }else if(str.charAt(i)=='x'){
      x=true;
    }
    if(str.charAt(i)=='y' && x==true)
     y=true;
  }
  if(x==false)
   y=true;
  return y;
}
-------------------------------------------------------------------------------------------------------------
<repeatFront>
Given a string and an int n, return a string made of the first n characters of the string, followed by 
the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the
 string, inclusive (i.e. n >= 0 and n <= str.length()).


repeatFront("Chocolate", 4) → "ChocChoChC"
repeatFront("Chocolate", 3) → "ChoChC"
repeatFront("Ice Cream", 2) → "IcI"

public String repeatFront(String str, int n) {
  int len=str.length();
  String newWord="";
  
  for(int i=n;n>0;n--){
    newWord +=str.substring(0,n);
  }
  return newWord;
}
-------------------------------------------------------------------------------------------------------------
<xyzMiddle>
Given a string, does "xyz" appear in the middle of the string? To define middle, we'll say that the number
 of chars to the left and right of the "xyz" must differ by at most one. This problem is harder than it looks.


xyzMiddle("AAxyzBB") → true
xyzMiddle("AxyzBB") → true
xyzMiddle("AxyzBBB") → false

public boolean xyzMiddle(String str) {
  String xyz="xyz";
  int len=str.length();
  int middle=len/2;
  
  if(len<3)
   return false;
   
  if(len%2!=0){
    if(xyz.equals(str.substring(middle-1,middle+2))){
      return true;
    }else{
      return false;
    }
  }else if(xyz.equals(str.substring(middle-1,middle+2)) || xyz.equals(str.substring(middle-2,middle+1))){
    return true;
  }else
   return false;
}
-------------------------------------------------------------------------------------------------------------
<oneTwo>
Given a string, compute a new string by moving the first char to come after the next two chars, so "abc"
 yields "bca". Repeat this process for each subsequent group of 3 chars, so "abcdef" yields "bcaefd". 
Ignore any group of fewer than 3 chars at the end.


oneTwo("abc") → "bca"
oneTwo("tca") → "cat"
oneTwo("tcagdo") → "catdog"

public String oneTwo(String str) {
  String result = "";
  for(int i=0; i <str.length()-2; i += 3)
  {
      result = result + str.substring(i+1,i+3) + str.charAt(i);
  }
  return result;

}
 /*
  int c=0;
int d=0;

for(int i=0;i<str.length()-2;i++)
{
if(str.substring(i,i+3).equals("cat"))
c = ++c;
if(str.substring(i,i+3).equals("dog"))
d = ++d;

}
if(c==d)
{
return true;
}
return false;
}
 int len=str.length();
  int cat=0;
  int dog=0;
  
  
  for(int i=0;i<len-2;i++){
    String temp=str.substring(i,i+3);
    if(temp.compareTo("cat")==0)
      cat++;
    if(temp.compareTo("dog")==0)
     dog++;
  }
  if(cat==dog)
    return true;
  else
   return false;*/
-------------------------------------------------------------------------------------------------------------
<plusOut>
Given a string and a non-empty word string, return a version of the original String where all chars have 
been replaced by pluses ("+"), except for appearances of the word string which are preserved unchanged.


plusOut("12xy34", "xy") → "++xy++"
plusOut("12xy34", "1") → "1+++++"
plusOut("12xy34xyabcxy", "xy") → "++xy++xy+++xy"

public String plusOut(String str, String word) {
  int slen=str.length();
  int wlen=word.length();
  String fin="";
  
  for(int i=0;i<slen;i++){
    if(i<=slen-wlen){
      String tmp=str.substring(i,i+wlen);
      if(tmp.equals(word)){
        fin+=word;
        i+=wlen-1;
      }
      else
        fin+="+";
    }
    else 
      fin+="+";
  }
  return fin;
}
-------------------------------------------------------------------------------------------------------------
<catDog>
Return true if the string "cat" and "dog" appear the same number of times in the given string.


catDog("catdog") → true
catDog("catcat") → false
catDog("1cat1cadodog") → true

public boolean catDog(String str) {
  int len=str.length();
  int cat=0;
  int dog=0;
  
  for(int i=0;i<len-2;i++){
    String temp=str.substring(i,i+3);
    if(temp.compareTo("cat")==0)
      cat++;
    if(temp.compareTo("dog")==0)
      dog++;
  }
  if(cat==dog)
   return true;
  else
   return false;
}
-------------------------------------------------------------------------------------------------------------
<xyzThere>
Return true if the given string contains an appearance of "xyz" where the xyz is not directly preceeded 
by a period (.). So "xxyz" counts but "x.xyz" does not.


xyzThere("abcxyz") → true
xyzThere("abc.xyz") → false
xyzThere("xyz.abc") → true

public boolean xyzThere(String str) {
  int len=str.length();
  String xyz="xyz";
  
  Boolean match=false;
  
  if(len<3)
    return false;
  for(int i=0; i<len-2;i++){
    String temp=str.substring(i,i+3);
    if(temp.compareTo(xyz)==0 && i==0)
      match=true;
    else if(temp.compareTo(xyz)==0 && str.charAt(i-1) !=46) //asci kodu
      match=true;
  }
  return match;
}
-------------------------------------------------------------------------------------------------------------
<mixString>

Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, 
the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result.


mixString("abc", "xyz") → "axbycz"
mixString("Hi", "There") → "HTihere"
mixString("xxxx", "There") → "xTxhxexre"

public String mixString(String a, String b) {
  int aLen=a.length();
  int bLen=b.length();
  int max=Math.max(aLen,bLen);
  String word="";
  
  for(int i=0;i<max;i++){
    if(i<=aLen-1)
      word+=a.substring(i,i+1);
    if(i<=bLen-1)
      word+=b.substring(i,i+1);
  }
  return word;
}
-------------------------------------------------------------------------------------------------------------
<repeatSeparator>

Given two strings, word and a separator sep, return a big string made of count occurrences of the word, 
separated by the separator string.


repeatSeparator("Word", "X", 3) → "WordXWordXWord"
repeatSeparator("This", "And", 2) → "ThisAndThis"
repeatSeparator("This", "And", 1) → "This"

public String repeatSeparator(String word, String sep, int count) {
  String mix = "";

   if(word.length() == 0 || count == 0) return "";

      for(int i=0; i < count; i++){
      mix = mix + word + sep;
    }

    if(count >= 1){
    mix = mix.substring(0 , mix.length() - sep.length() );
  }

  return mix;
}
-------------------------------------------------------------------------------------------------------------
<getSandwich>
A sandwich is two pieces of bread with something in between. Return the string that is between the first 
and last appearance of "bread" in the given string, or return the empty string "" if there are not 
two pieces of bread.


getSandwich("breadjambread") → "jam"
getSandwich("xxbreadjambreadyy") → "jam"
getSandwich("xxbreadyy") → ""

public String getSandwich(String str) {
  int len=str.length();
  String tmpString="";
  String finalString="";
  int start=0;
  int finish=0;
  boolean found=false;
  
  if(len<=10)
    return "";
  for(int i=0;i<len-4;i++){
    tmpString=str.substring(i,i+5);
    
    if(tmpString.equals("bread") && found==true)
      finish=i;
    if(tmpString.equals("bread") && found==false){
      start=i+5;
      found=true;
    }
  }
  finalString=str.substring(start,finish);
  return finalString;
}
-------------------------------------------------------------------------------------------------------------
<zipZap>
Look for patterns like "zip" and "zap" in the string -- length-3, starting with 'z' and ending with 'p'.
 Return a string where for all such words, the middle letter is gone, so "zipXzap" yields "zpXzp".


zipZap("zipXzap") → "zpXzp"
zipZap("zopzop") → "zpzp"
zipZap("zzzopzop") → "zzzpzp"

public String zipZap(String str) {
  int len=str.length();
  String finalString="";
  
  for(int i=0;i<len;i++){
    finalString+=str.substring(i,i+1);
    if(i>0 && i<len-1){
      if(str.charAt(i-1)=='z' && str.charAt(i+1)=='p')
        finalString=finalString.substring(0,finalString.length()-1);
    }
  }
  return finalString;
}
-------------------------------------------------------------------------------------------------------------
<wordEnds>
Given a string and a non-empty word string, return a string made of each char just before and just 
after every appearance of the word in the string. Ignore cases where there is no char before or after the word, 
and a char may be included twice if it is between two words.


wordEnds("abcXY123XYijk", "XY") → "c13i"
wordEnds("XY123XY", "XY") → "13"
wordEnds("XY1XY", "XY") → "11"

public String wordEnds(String str, String word) {
  int slen=str.length();
  int wlen=word.length();
  String fin="";
  
  for(int i=0;i<slen-wlen+1;i++){
    String tmp=str.substring(i,i+wlen);
    if(i>0 && tmp.equals(word))
      fin+=str.substring(i-1,i);
    if(i<slen-wlen && tmp.equals(word))
      fin+=str.substring(i+wlen,i+wlen+1);
  }
  return fin;
}

